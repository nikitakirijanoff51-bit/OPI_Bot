import os
import telebot
from flask import Flask, request
import pandas as pd

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

DATA_FILE = "data.xlsx"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel ===
if not os.path.exists(DATA_FILE):
    df = pd.DataFrame(columns=["–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ", "‚Ññ –°–∫–≤–∞–∂–∏–Ω—ã", "–°—Ç–∞—Ç—É—Å", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    df.to_excel(DATA_FILE, index=False)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# === –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===
@bot.message_handler(func=lambda msg: msg.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É")
def show_table(message):
    df = pd.read_excel(DATA_FILE)
    if df.empty:
        bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è üóíÔ∏è")
    else:
        text = "\n\n".join([f"{row['–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ']} | {row['‚Ññ –°–∫–≤–∞–∂–∏–Ω—ã']} | {row['–°—Ç–∞—Ç—É—Å']} | {row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}"
                            for _, row in df.iterrows()])
        bot.send_message(message.chat.id, f"üìä –¢–∞–±–ª–∏—Ü–∞:\n\n{text}")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
def add_entry(message):
    bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ; ‚Ññ –°–∫–≤–∞–∂–∏–Ω—ã; –°—Ç–∞—Ç—É—Å; –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    bot.register_next_step_handler(message, save_entry)

def save_entry(message):
    try:
        parts = [p.strip() for p in message.text.split(";")]
        if len(parts) != 4:
            raise ValueError
        df = pd.read_excel(DATA_FILE)
        new_row = pd.DataFrame([{
            "–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ": parts[0],
            "‚Ññ –°–∫–≤–∞–∂–∏–Ω—ã": parts[1],
            "–°—Ç–∞—Ç—É—Å": parts[2],
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": parts[3]
        }])
        df = pd.concat([df, new_row], ignore_index=True)
        df.to_excel(DATA_FILE, index=False)
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    except Exception:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ ‚Äî —á–µ—Ä–µ–∑ ;")

# === Flask webhook ===
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_str = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return "OK", 200

@app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram!"

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
    bot.remove_webhook()
    bot.set_webhook(url=f"{RENDER_EXTERNAL_URL}/webhook")
    print(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {RENDER_EXTERNAL_URL}/webhook")
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
