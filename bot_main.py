import os
import telebot
from telebot import types
from flask import Flask, request
import pandas as pd

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

EXCEL_FILE = "data.xlsx"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel ---
def init_excel():
    if not os.path.exists(EXCEL_FILE):
        df = pd.DataFrame(columns=["–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ", "‚Ññ –°–∫–≤–∞–∂–∏–Ω—ã", "–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
        df.to_excel(EXCEL_FILE, index=False)

def read_excel():
    return pd.read_excel(EXCEL_FILE)

def write_excel(df):
    df.to_excel(EXCEL_FILE, index=False)

init_excel()


# --- –ö–Ω–æ–ø–∫–∏ ---
def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"),
               types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"),
               types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"))
    return markup


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è–º.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard()
    )


# --- –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ ---
@bot.message_handler(func=lambda msg: msg.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
def show_data(message):
    df = read_excel()
    if df.empty:
        bot.send_message(message.chat.id, "üìÇ –í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    text = "üìä *–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
    for _, row in df.iterrows():
        text += f"üèûÔ∏è {row['–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ']}\nüîπ –°–∫–≤–∞–∂–∏–Ω–∞: {row['‚Ññ –°–∫–≤–∞–∂–∏–Ω—ã']}\n" \
                f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {row['–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è']}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}\n\n"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
def add_record_start(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ*:", parse_mode="Markdown")
    bot.register_next_step_handler(message, add_field_well)


def add_field_well(message):
    user_data = {"–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ": message.text}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã*:", parse_mode="Markdown")
    bot.register_next_step_handler(message, add_field_status, user_data)


def add_field_status(message, user_data):
    user_data["‚Ññ –°–∫–≤–∞–∂–∏–Ω—ã"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *—Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*:", parse_mode="Markdown")
    bot.register_next_step_handler(message, add_field_comment, user_data)


def add_field_comment(message, user_data):
    user_data["–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*:", parse_mode="Markdown")
    bot.register_next_step_handler(message, save_record, user_data)


def save_record(message, user_data):
    user_data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = message.text
    df = read_excel()
    df = pd.concat([df, pd.DataFrame([user_data])], ignore_index=True)
    write_excel(df)
    bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())


# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
@bot.message_handler(func=lambda msg: msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
def edit_record_start(message):
    df = read_excel()
    if df.empty:
        bot.send_message(message.chat.id, "‚ùó –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å.")
        return
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞—è —Å 1):\n\n"
    for i, row in df.iterrows():
        text += f"{i+1}) {row['–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ']} ‚Äì {row['‚Ññ –°–∫–≤–∞–∂–∏–Ω—ã']}\n"
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, edit_field_select)


def edit_field_select(message):
    try:
        index = int(message.text) - 1
        df = read_excel()
        if index < 0 or index >= len(df):
            raise ValueError
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ *—Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*:", parse_mode="Markdown")
        bot.register_next_step_handler(message, edit_save, index)
    except Exception:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def edit_save(message, index):
    df = read_excel()
    df.loc[index, "–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"] = message.text
    write_excel(df)
    bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())


# --- Webhook –¥–ª—è Render ---
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_str = request.get_data(as_text=True)
        print("üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (raw):", json_str)
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", repr(e))
    return "OK", 200


# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞) ---
@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
    bot.remove_webhook()
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    success = bot.set_webhook(url=webhook_url)
    print(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {success} ({webhook_url})")

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
