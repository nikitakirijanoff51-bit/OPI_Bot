# bot_main.py
import os
import sqlite3
import pandas as pd
import time
from flask import Flask, request
import telebot

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://opi-bot-1.onrender.com

if not BOT_TOKEN or not RENDER_EXTERNAL_URL:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ RENDER_EXTERNAL_URL")

DB_FILE = "data.db"
EXPORT_FILE = "export.xlsx"

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ------------------ –†–∞–±–æ—Ç–∞ —Å –ë–î ------------------
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS wells (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            field TEXT,
            well TEXT UNIQUE,
            status TEXT,
            comment TEXT,
            updated_at TEXT
        )
    """)
    conn.commit()
    conn.close()

def add_record(field, well, status, comment):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    now = time.strftime("%Y-%m-%d %H:%M:%S")
    try:
        cur.execute("INSERT INTO wells (field, well, status, comment, updated_at) VALUES (?, ?, ?, ?, ?)",
                    (field, well, status, comment, now))
        conn.commit()
        return True, None
    except sqlite3.IntegrityError as e:
        return False, str(e)
    finally:
        conn.close()

def update_record(well, status, comment):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    now = time.strftime("%Y-%m-%d %H:%M:%S")
    cur.execute("SELECT id FROM wells WHERE well = ?", (well,))
    row = cur.fetchone()
    if not row:
        conn.close()
        return False, "–°–∫–≤–∞–∂–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    cur.execute("UPDATE wells SET status = ?, comment = ?, updated_at = ? WHERE well = ?",
                (status, comment, now, well))
    conn.commit()
    conn.close()
    return True, None

def read_all():
    conn = sqlite3.connect(DB_FILE)
    df = pd.read_sql_query("SELECT field, well, status, comment, updated_at FROM wells ORDER BY field, well", conn)
    conn.close()
    return df

def get_fields():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT DISTINCT field FROM wells")
    rows = [r[0] for r in cur.fetchall()]
    conn.close()
    return rows

def get_wells_list():
    df = read_all()
    return df

def export_to_excel(path=EXPORT_FILE):
    df = read_all()
    df.to_excel(path, index=False)
    return path

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ------------------
init_db()

# –í—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if read_all().shape[0] == 0:
    add_record("–°–µ–≤–µ—Ä–Ω–æ–µ", "–°-101", "–í —Ä–∞–±–æ—Ç–µ", "–ü–µ—Ä–≤–∏—á–Ω–∞—è –≥–∏–¥—Ä–æ—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
    add_record("–Æ–∂–Ω–æ–µ", "–Æ-204", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", "–†–ö –ø—Ä–æ–≤–µ–¥—ë–Ω")
    add_record("–í–æ—Å—Ç–æ—á–Ω–æ–µ", "–í-301", "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–æ—â–∞–¥–∫–∏")

# ------------------ Webhook setup ------------------
def set_webhook():
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    bot.remove_webhook()
    success = bot.set_webhook(url=webhook_url)
    print(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {success} ({webhook_url})")

# –°—Ç–∞–≤–∏–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...")
set_webhook()

# ------------------ Flask endpoints ------------------
@app.route("/", methods=["GET"])
def index():
    return "‚úÖ OPI Bot (SQLite) running", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        print("üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", json_str)
        update = telebot.types.Update.de_json(json_str)
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–µ–º
        if getattr(update, "message", None):
            # –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–¥–∞—Ç—å message –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ handler'–æ–≤
            bot.process_new_messages([update.message])
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", e)
    return "OK", 200

# ------------------ Bot handlers ------------------
@bot.message_handler(commands=["start"])
def cmd_start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìç –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è", "üõ¢ –°–∫–≤–∞–∂–∏–Ω—ã")
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å")
    markup.row("/export", "/help")
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(commands=["help"])
def cmd_help(message):
    help_text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ>|<‚Ññ_–°–∫–≤–∞–∂–∏–Ω—ã>|<–°—Ç–∞—Ç—É—Å>|<–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π> - –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–∂–∏–Ω—É\n"
        "/update <‚Ññ_–°–∫–≤–∞–∂–∏–Ω—ã>|<–°—Ç–∞—Ç—É—Å>|<–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π> - –æ–±–Ω–æ–≤–∏—Ç—å\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏: üìç –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è / üõ¢ –°–∫–≤–∞–∂–∏–Ω—ã / ‚ûï –î–æ–±–∞–≤–∏—Ç—å / ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å"
    )
    bot.send_message(message.chat.id, help_text)

# –∫–Ω–æ–ø–∫–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@bot.message_handler(func=lambda m: m.text in ["üìç –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è", "üõ¢ –°–∫–≤–∞–∂–∏–Ω—ã", "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å"])
def handle_buttons(message):
    text = message.text
    if text == "üìç –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è":
        fields = get_fields()
        if not fields:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        reply = "üìç –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è:\n" + "\n".join(f"- {f}" for f in fields)
        bot.send_message(message.chat.id, reply)
    elif text == "üõ¢ –°–∫–≤–∞–∂–∏–Ω—ã":
        df = get_wells_list()
        if df.empty:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        lines = []
        for _, row in df.iterrows():
            lines.append(f"üõ¢ {row['well']} ({row['field']})\n–°—Ç–∞—Ç—É—Å: {row['status']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row['comment']}\n")
        bot.send_message(message.chat.id, "\n".join(lines))
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        bot.send_message(message.chat.id, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π:\n/add –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ|‚Ññ_–°–∫–≤–∞–∂–∏–Ω—ã|–°—Ç–∞—Ç—É—Å|–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    elif text == "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å":
        bot.send_message(message.chat.id, "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π:\n/update ‚Ññ_–°–∫–≤–∞–∂–∏–Ω—ã|–ù–æ–≤—ã–π_–°—Ç–∞—Ç—É—Å|–ù–æ–≤—ã–π_–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

@bot.message_handler(commands=["add"])
def cmd_add(message):
    # —Ñ–æ—Ä–º–∞—Ç: /add –ü–æ–ª–µ|–°–∫–≤–∞–∂–∏–Ω–∞|–°—Ç–∞—Ç—É—Å|–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    try:
        parts = message.text.split(" ", 1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/add –°–µ–≤–µ—Ä–Ω–æ–µ|–°-101|–í —Ä–∞–±–æ—Ç–µ|–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            return
        fields = parts[1].split("|", 3)
        if len(fields) < 4:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 4 –ø–æ–ª—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö '|'.")
            return
        field, well, status, comment = [s.strip() for s in fields]
        ok, err = add_record(field, well, status, comment)
        if ok:
            bot.send_message(message.chat.id, f"‚úÖ –°–∫–≤–∞–∂–∏–Ω–∞ {well} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ {field}.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {err}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=["update"])
def cmd_update(message):
    # —Ñ–æ—Ä–º–∞—Ç: /update –°-101|–ù–æ–≤—ã–π–°—Ç–∞—Ç—É—Å|–ù–æ–≤—ã–π–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    try:
        parts = message.text.split(" ", 1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n/update –°-101|–ó–∞–≤–µ—Ä—à–µ–Ω–æ|–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            return
        fields = parts[1].split("|", 2)
        if len(fields) < 3:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 3 –ø–æ–ª—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö '|'.")
            return
        well, status, comment = [s.strip() for s in fields]
        ok, err = update_record(well, status, comment)
        if ok:
            bot.send_message(message.chat.id, f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ {well} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {err}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=["export"])
def cmd_export(message):
    try:
        path = export_to_excel()
        with open(path, "rb") as f:
            bot.send_document(message.chat.id, f)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

# –û—Ç–ª–æ–≤ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏.")

# ------------------ –ó–∞–ø—É—Å–∫ Flask (–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ webhook) ------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print("üöÄ Flask server starting, webhook should be already set.")
    app.run(host="0.0.0.0", port=port)
