import os
import telebot
from flask import Flask, request
import pandas as pd

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# === Excel —Ñ–∞–π–ª ===
EXCEL_FILE = "data.xlsx"

# –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
if not os.path.exists(EXCEL_FILE):
    df = pd.DataFrame(columns=["–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ", "#–°–∫–≤–∞–∂–∏–Ω—ã", "–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    df.to_excel(EXCEL_FILE, index=False)
    print("üìò –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª data.xlsx")

# === /start ===
@bot.message_handler(commands=["start"])
def start_handler(message):
    chat_id = message.chat.id
    bot.send_message(
        chat_id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–∫–≤–∞–∂–∏–Ω.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É.",
    )

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ ===
@bot.message_handler(commands=["add"])
def add_handler(message):
    chat_id = message.chat.id
    try:
        parts = message.text.split(" ", 4)
        if len(parts) < 5:
            bot.send_message(chat_id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /add –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            return

        _, mest, well, status, comment = parts
        df = pd.read_excel(EXCEL_FILE)
        df.loc[len(df)] = [mest, well, status, comment]
        df.to_excel(EXCEL_FILE, index=False)
        bot.send_message(chat_id, "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É!")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã ===
@bot.message_handler(commands=["show"])
def show_handler(message):
    chat_id = message.chat.id
    try:
        df = pd.read_excel(EXCEL_FILE)
        if df.empty:
            bot.send_message(chat_id, "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        else:
            text = ""
            for _, row in df.iterrows():
                text += f"üè≠ {row['–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ']} | ‚õΩ {row['#–°–∫–≤–∞–∂–∏–Ω—ã']} | üìä {row['–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è']} | üí¨ {row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}\n"
            bot.send_message(chat_id, text[:4000])
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook ===
def setup_webhook():
    if not BOT_TOKEN or not RENDER_EXTERNAL_URL:
        print("‚ùå BOT_TOKEN –∏–ª–∏ RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω—ã!")
        return False
    bot.remove_webhook()
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    result = bot.set_webhook(url=webhook_url)
    print(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result} ({webhook_url})")
    return result

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram!"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook ===
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (raw): {update}")
        bot.process_new_updates([update])  # üëà —Ç–µ–ø–µ—Ä—å Telebot —Ç–æ—á–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
    return "OK", 200

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == "__main__":
    setup_webhook()
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
