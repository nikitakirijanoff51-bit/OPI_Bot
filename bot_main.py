import os
import telebot
from telebot import types
from flask import Flask, request
import pandas as pd

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("SERVICE_URL")
EXCEL_FILE = "data.xlsx"

app = Flask(__name__)
bot = telebot.TeleBot(BOT_TOKEN)

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Excel-—Ñ–∞–π–ª–∞ ===
def init_excel():
    if not os.path.exists(EXCEL_FILE):
        df = pd.DataFrame(columns=["–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ", "#–°–∫–≤–∞–∂–∏–Ω—ã", "–°—Ç–∞—Ç—É—Å", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
        df.to_excel(EXCEL_FILE, index=False)
        print("üìò –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª data.xlsx")
    else:
        print("üìó –§–∞–π–ª Excel –Ω–∞–π–¥–µ–Ω")

init_excel()

# === Flask Webhook ===
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        json_data = request.get_json(force=True)
        if not json_data:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π JSON –æ—Ç Telegram")
            return "no data", 400

        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (raw): {json_data}")
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    return "OK", 200

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=["start"])
def start(message):
    print(f"‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# === –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É ===
@bot.message_handler(func=lambda msg: msg.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É")
def show_table(message):
    try:
        df = pd.read_excel(EXCEL_FILE)
        if df.empty:
            bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
            return
        text = "\n\n".join([f"üè≠ {r['–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ']}\nüî© {r['#–°–∫–≤–∞–∂–∏–Ω—ã']}\nüìã {r['–°—Ç–∞—Ç—É—Å']}\nüí¨ {r['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}" for _, r in df.iterrows()])
        bot.send_message(message.chat.id, f"üìÑ –¢–∞–±–ª–∏—Ü–∞:\n\n{text}")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# === –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å ===
@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
def add_entry(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ; #–°–∫–≤–∞–∂–∏–Ω—ã; –°—Ç–∞—Ç—É—Å; –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    bot.register_next_step_handler(message, save_entry)

def save_entry(message):
    try:
        data = [x.strip() for x in message.text.split(";")]
        if len(data) != 4:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π 4 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ `;`.")
            return
        df = pd.read_excel(EXCEL_FILE)
        new_row = {"–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ": data[0], "#–°–∫–≤–∞–∂–∏–Ω—ã": data[1], "–°—Ç–∞—Ç—É—Å": data[2], "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": data[3]}
        df.loc[len(df)] = new_row
        df.to_excel(EXCEL_FILE, index=False)
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

# === –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ===
@bot.message_handler(func=lambda msg: msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
def edit_entry(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–ù–æ–º–µ—Ä; –ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ; #–°–∫–≤–∞–∂–∏–Ω—ã; –°—Ç–∞—Ç—É—Å; –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    bot.register_next_step_handler(message, update_entry)

def update_entry(message):
    try:
        data = [x.strip() for x in message.text.split(";")]
        if len(data) != 5:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π 5 –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ `;`.")
            return
        idx = int(data[0]) - 1
        df = pd.read_excel(EXCEL_FILE)
        if idx < 0 or idx >= len(df):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏.")
            return
        df.iloc[idx] = {"–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ": data[1], "#–°–∫–≤–∞–∂–∏–Ω—ã": data[2], "–°—Ç–∞—Ç—É—Å": data[3], "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": data[4]}
        df.to_excel(EXCEL_FILE, index=False)
        bot.send_message(message.chat.id, "‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (Render Ping) ===
@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üü¢", 200

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook ===
def setup_webhook():
    if RENDER_URL and BOT_TOKEN:
        webhook_url = f"{RENDER_URL}/webhook"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã")

import threading
import time

def run_flask():
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    setup_webhook()
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask + TeleBot...")

    # –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è Flask
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è Telebot ‚Äî —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=5)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ polling —Ü–∏–∫–ª–µ: {e}")
            time.sleep(5)
